// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: agent.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeighScaleDeviceClient is the client API for WeighScaleDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeighScaleDeviceClient interface {
	Login(ctx context.Context, in *WeighingScaleLogin, opts ...grpc.CallOption) (*WeighingScaleLoginResponse, error)
	HeartBeat(ctx context.Context, in *WeighingScaleHeartBeat, opts ...grpc.CallOption) (*WeighingScaleResponse, error)
	InitDish(ctx context.Context, in *InitDishRequest, opts ...grpc.CallOption) (*InitDishResponse, error)
	ConfirmDish(ctx context.Context, in *ConfirmDishRequest, opts ...grpc.CallOption) (*ConfirmDishResponse, error)
	EmitEvent(ctx context.Context, in *WeighingScaleEvent, opts ...grpc.CallOption) (*WeighingScaleResponse, error)
	DownloadFood(ctx context.Context, in *DownloadFoodRequest, opts ...grpc.CallOption) (*FoodResponse, error)
	DownloadMeal(ctx context.Context, in *DownloadMealRequest, opts ...grpc.CallOption) (*MealResponse, error)
	DownloadSysPara(ctx context.Context, in *DownloadSysParaRequest, opts ...grpc.CallOption) (*SysparaResponse, error)
	UploadWeighAction(ctx context.Context, in *WeighActionRequest, opts ...grpc.CallOption) (*WeighActionResponse, error)
}

type weighScaleDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeighScaleDeviceClient(cc grpc.ClientConnInterface) WeighScaleDeviceClient {
	return &weighScaleDeviceClient{cc}
}

func (c *weighScaleDeviceClient) Login(ctx context.Context, in *WeighingScaleLogin, opts ...grpc.CallOption) (*WeighingScaleLoginResponse, error) {
	out := new(WeighingScaleLoginResponse)
	err := c.cc.Invoke(ctx, "/WeighScaleDevice/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weighScaleDeviceClient) HeartBeat(ctx context.Context, in *WeighingScaleHeartBeat, opts ...grpc.CallOption) (*WeighingScaleResponse, error) {
	out := new(WeighingScaleResponse)
	err := c.cc.Invoke(ctx, "/WeighScaleDevice/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weighScaleDeviceClient) InitDish(ctx context.Context, in *InitDishRequest, opts ...grpc.CallOption) (*InitDishResponse, error) {
	out := new(InitDishResponse)
	err := c.cc.Invoke(ctx, "/WeighScaleDevice/InitDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weighScaleDeviceClient) ConfirmDish(ctx context.Context, in *ConfirmDishRequest, opts ...grpc.CallOption) (*ConfirmDishResponse, error) {
	out := new(ConfirmDishResponse)
	err := c.cc.Invoke(ctx, "/WeighScaleDevice/ConfirmDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weighScaleDeviceClient) EmitEvent(ctx context.Context, in *WeighingScaleEvent, opts ...grpc.CallOption) (*WeighingScaleResponse, error) {
	out := new(WeighingScaleResponse)
	err := c.cc.Invoke(ctx, "/WeighScaleDevice/EmitEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weighScaleDeviceClient) DownloadFood(ctx context.Context, in *DownloadFoodRequest, opts ...grpc.CallOption) (*FoodResponse, error) {
	out := new(FoodResponse)
	err := c.cc.Invoke(ctx, "/WeighScaleDevice/DownloadFood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weighScaleDeviceClient) DownloadMeal(ctx context.Context, in *DownloadMealRequest, opts ...grpc.CallOption) (*MealResponse, error) {
	out := new(MealResponse)
	err := c.cc.Invoke(ctx, "/WeighScaleDevice/DownloadMeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weighScaleDeviceClient) DownloadSysPara(ctx context.Context, in *DownloadSysParaRequest, opts ...grpc.CallOption) (*SysparaResponse, error) {
	out := new(SysparaResponse)
	err := c.cc.Invoke(ctx, "/WeighScaleDevice/DownloadSysPara", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weighScaleDeviceClient) UploadWeighAction(ctx context.Context, in *WeighActionRequest, opts ...grpc.CallOption) (*WeighActionResponse, error) {
	out := new(WeighActionResponse)
	err := c.cc.Invoke(ctx, "/WeighScaleDevice/UploadWeighAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeighScaleDeviceServer is the server API for WeighScaleDevice service.
// All implementations must embed UnimplementedWeighScaleDeviceServer
// for forward compatibility
type WeighScaleDeviceServer interface {
	Login(context.Context, *WeighingScaleLogin) (*WeighingScaleLoginResponse, error)
	HeartBeat(context.Context, *WeighingScaleHeartBeat) (*WeighingScaleResponse, error)
	InitDish(context.Context, *InitDishRequest) (*InitDishResponse, error)
	ConfirmDish(context.Context, *ConfirmDishRequest) (*ConfirmDishResponse, error)
	EmitEvent(context.Context, *WeighingScaleEvent) (*WeighingScaleResponse, error)
	DownloadFood(context.Context, *DownloadFoodRequest) (*FoodResponse, error)
	DownloadMeal(context.Context, *DownloadMealRequest) (*MealResponse, error)
	DownloadSysPara(context.Context, *DownloadSysParaRequest) (*SysparaResponse, error)
	UploadWeighAction(context.Context, *WeighActionRequest) (*WeighActionResponse, error)
	mustEmbedUnimplementedWeighScaleDeviceServer()
}

// UnimplementedWeighScaleDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedWeighScaleDeviceServer struct {
}

func (UnimplementedWeighScaleDeviceServer) Login(context.Context, *WeighingScaleLogin) (*WeighingScaleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedWeighScaleDeviceServer) HeartBeat(context.Context, *WeighingScaleHeartBeat) (*WeighingScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedWeighScaleDeviceServer) InitDish(context.Context, *InitDishRequest) (*InitDishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDish not implemented")
}
func (UnimplementedWeighScaleDeviceServer) ConfirmDish(context.Context, *ConfirmDishRequest) (*ConfirmDishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDish not implemented")
}
func (UnimplementedWeighScaleDeviceServer) EmitEvent(context.Context, *WeighingScaleEvent) (*WeighingScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitEvent not implemented")
}
func (UnimplementedWeighScaleDeviceServer) DownloadFood(context.Context, *DownloadFoodRequest) (*FoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFood not implemented")
}
func (UnimplementedWeighScaleDeviceServer) DownloadMeal(context.Context, *DownloadMealRequest) (*MealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadMeal not implemented")
}
func (UnimplementedWeighScaleDeviceServer) DownloadSysPara(context.Context, *DownloadSysParaRequest) (*SysparaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadSysPara not implemented")
}
func (UnimplementedWeighScaleDeviceServer) UploadWeighAction(context.Context, *WeighActionRequest) (*WeighActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadWeighAction not implemented")
}
func (UnimplementedWeighScaleDeviceServer) mustEmbedUnimplementedWeighScaleDeviceServer() {}

// UnsafeWeighScaleDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeighScaleDeviceServer will
// result in compilation errors.
type UnsafeWeighScaleDeviceServer interface {
	mustEmbedUnimplementedWeighScaleDeviceServer()
}

func RegisterWeighScaleDeviceServer(s grpc.ServiceRegistrar, srv WeighScaleDeviceServer) {
	s.RegisterService(&WeighScaleDevice_ServiceDesc, srv)
}

func _WeighScaleDevice_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeighingScaleLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeighScaleDeviceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeighScaleDevice/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeighScaleDeviceServer).Login(ctx, req.(*WeighingScaleLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeighScaleDevice_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeighingScaleHeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeighScaleDeviceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeighScaleDevice/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeighScaleDeviceServer).HeartBeat(ctx, req.(*WeighingScaleHeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeighScaleDevice_InitDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeighScaleDeviceServer).InitDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeighScaleDevice/InitDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeighScaleDeviceServer).InitDish(ctx, req.(*InitDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeighScaleDevice_ConfirmDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeighScaleDeviceServer).ConfirmDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeighScaleDevice/ConfirmDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeighScaleDeviceServer).ConfirmDish(ctx, req.(*ConfirmDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeighScaleDevice_EmitEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeighingScaleEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeighScaleDeviceServer).EmitEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeighScaleDevice/EmitEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeighScaleDeviceServer).EmitEvent(ctx, req.(*WeighingScaleEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeighScaleDevice_DownloadFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeighScaleDeviceServer).DownloadFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeighScaleDevice/DownloadFood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeighScaleDeviceServer).DownloadFood(ctx, req.(*DownloadFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeighScaleDevice_DownloadMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeighScaleDeviceServer).DownloadMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeighScaleDevice/DownloadMeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeighScaleDeviceServer).DownloadMeal(ctx, req.(*DownloadMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeighScaleDevice_DownloadSysPara_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadSysParaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeighScaleDeviceServer).DownloadSysPara(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeighScaleDevice/DownloadSysPara",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeighScaleDeviceServer).DownloadSysPara(ctx, req.(*DownloadSysParaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeighScaleDevice_UploadWeighAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeighActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeighScaleDeviceServer).UploadWeighAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeighScaleDevice/UploadWeighAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeighScaleDeviceServer).UploadWeighAction(ctx, req.(*WeighActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeighScaleDevice_ServiceDesc is the grpc.ServiceDesc for WeighScaleDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeighScaleDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WeighScaleDevice",
	HandlerType: (*WeighScaleDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _WeighScaleDevice_Login_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _WeighScaleDevice_HeartBeat_Handler,
		},
		{
			MethodName: "InitDish",
			Handler:    _WeighScaleDevice_InitDish_Handler,
		},
		{
			MethodName: "ConfirmDish",
			Handler:    _WeighScaleDevice_ConfirmDish_Handler,
		},
		{
			MethodName: "EmitEvent",
			Handler:    _WeighScaleDevice_EmitEvent_Handler,
		},
		{
			MethodName: "DownloadFood",
			Handler:    _WeighScaleDevice_DownloadFood_Handler,
		},
		{
			MethodName: "DownloadMeal",
			Handler:    _WeighScaleDevice_DownloadMeal_Handler,
		},
		{
			MethodName: "DownloadSysPara",
			Handler:    _WeighScaleDevice_DownloadSysPara_Handler,
		},
		{
			MethodName: "UploadWeighAction",
			Handler:    _WeighScaleDevice_UploadWeighAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}

// BindDeviceClient is the client API for BindDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BindDeviceClient interface {
	BindDish(ctx context.Context, in *BindDishRequest, opts ...grpc.CallOption) (*BindDishResponse, error)
	UnbindDish(ctx context.Context, in *UnbindDishRequest, opts ...grpc.CallOption) (*UnbindDishResponse, error)
	TransConfirm(ctx context.Context, in *TransConfirmRequest, opts ...grpc.CallOption) (*TransConfirmResponse, error)
	QueryDish(ctx context.Context, in *DishQueryRequest, opts ...grpc.CallOption) (*DishQueryResponse, error)
	QueryTrans(ctx context.Context, in *TransQueryRequest, opts ...grpc.CallOption) (*TransQueryResponse, error)
	TransResetDish(ctx context.Context, in *TransResetDishRequest, opts ...grpc.CallOption) (*TransResetDishResponse, error)
}

type bindDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewBindDeviceClient(cc grpc.ClientConnInterface) BindDeviceClient {
	return &bindDeviceClient{cc}
}

func (c *bindDeviceClient) BindDish(ctx context.Context, in *BindDishRequest, opts ...grpc.CallOption) (*BindDishResponse, error) {
	out := new(BindDishResponse)
	err := c.cc.Invoke(ctx, "/BindDevice/BindDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindDeviceClient) UnbindDish(ctx context.Context, in *UnbindDishRequest, opts ...grpc.CallOption) (*UnbindDishResponse, error) {
	out := new(UnbindDishResponse)
	err := c.cc.Invoke(ctx, "/BindDevice/UnbindDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindDeviceClient) TransConfirm(ctx context.Context, in *TransConfirmRequest, opts ...grpc.CallOption) (*TransConfirmResponse, error) {
	out := new(TransConfirmResponse)
	err := c.cc.Invoke(ctx, "/BindDevice/TransConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindDeviceClient) QueryDish(ctx context.Context, in *DishQueryRequest, opts ...grpc.CallOption) (*DishQueryResponse, error) {
	out := new(DishQueryResponse)
	err := c.cc.Invoke(ctx, "/BindDevice/QueryDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindDeviceClient) QueryTrans(ctx context.Context, in *TransQueryRequest, opts ...grpc.CallOption) (*TransQueryResponse, error) {
	out := new(TransQueryResponse)
	err := c.cc.Invoke(ctx, "/BindDevice/QueryTrans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindDeviceClient) TransResetDish(ctx context.Context, in *TransResetDishRequest, opts ...grpc.CallOption) (*TransResetDishResponse, error) {
	out := new(TransResetDishResponse)
	err := c.cc.Invoke(ctx, "/BindDevice/TransResetDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BindDeviceServer is the server API for BindDevice service.
// All implementations must embed UnimplementedBindDeviceServer
// for forward compatibility
type BindDeviceServer interface {
	BindDish(context.Context, *BindDishRequest) (*BindDishResponse, error)
	UnbindDish(context.Context, *UnbindDishRequest) (*UnbindDishResponse, error)
	TransConfirm(context.Context, *TransConfirmRequest) (*TransConfirmResponse, error)
	QueryDish(context.Context, *DishQueryRequest) (*DishQueryResponse, error)
	QueryTrans(context.Context, *TransQueryRequest) (*TransQueryResponse, error)
	TransResetDish(context.Context, *TransResetDishRequest) (*TransResetDishResponse, error)
	mustEmbedUnimplementedBindDeviceServer()
}

// UnimplementedBindDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedBindDeviceServer struct {
}

func (UnimplementedBindDeviceServer) BindDish(context.Context, *BindDishRequest) (*BindDishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindDish not implemented")
}
func (UnimplementedBindDeviceServer) UnbindDish(context.Context, *UnbindDishRequest) (*UnbindDishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindDish not implemented")
}
func (UnimplementedBindDeviceServer) TransConfirm(context.Context, *TransConfirmRequest) (*TransConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransConfirm not implemented")
}
func (UnimplementedBindDeviceServer) QueryDish(context.Context, *DishQueryRequest) (*DishQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDish not implemented")
}
func (UnimplementedBindDeviceServer) QueryTrans(context.Context, *TransQueryRequest) (*TransQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTrans not implemented")
}
func (UnimplementedBindDeviceServer) TransResetDish(context.Context, *TransResetDishRequest) (*TransResetDishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransResetDish not implemented")
}
func (UnimplementedBindDeviceServer) mustEmbedUnimplementedBindDeviceServer() {}

// UnsafeBindDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BindDeviceServer will
// result in compilation errors.
type UnsafeBindDeviceServer interface {
	mustEmbedUnimplementedBindDeviceServer()
}

func RegisterBindDeviceServer(s grpc.ServiceRegistrar, srv BindDeviceServer) {
	s.RegisterService(&BindDevice_ServiceDesc, srv)
}

func _BindDevice_BindDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindDeviceServer).BindDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BindDevice/BindDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindDeviceServer).BindDish(ctx, req.(*BindDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindDevice_UnbindDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindDeviceServer).UnbindDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BindDevice/UnbindDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindDeviceServer).UnbindDish(ctx, req.(*UnbindDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindDevice_TransConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindDeviceServer).TransConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BindDevice/TransConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindDeviceServer).TransConfirm(ctx, req.(*TransConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindDevice_QueryDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindDeviceServer).QueryDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BindDevice/QueryDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindDeviceServer).QueryDish(ctx, req.(*DishQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindDevice_QueryTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindDeviceServer).QueryTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BindDevice/QueryTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindDeviceServer).QueryTrans(ctx, req.(*TransQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindDevice_TransResetDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransResetDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindDeviceServer).TransResetDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BindDevice/TransResetDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindDeviceServer).TransResetDish(ctx, req.(*TransResetDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BindDevice_ServiceDesc is the grpc.ServiceDesc for BindDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BindDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BindDevice",
	HandlerType: (*BindDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BindDish",
			Handler:    _BindDevice_BindDish_Handler,
		},
		{
			MethodName: "UnbindDish",
			Handler:    _BindDevice_UnbindDish_Handler,
		},
		{
			MethodName: "TransConfirm",
			Handler:    _BindDevice_TransConfirm_Handler,
		},
		{
			MethodName: "QueryDish",
			Handler:    _BindDevice_QueryDish_Handler,
		},
		{
			MethodName: "QueryTrans",
			Handler:    _BindDevice_QueryTrans_Handler,
		},
		{
			MethodName: "TransResetDish",
			Handler:    _BindDevice_TransResetDish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
